name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.12"

permissions:
  contents: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.head_ref }}
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
        
    - name: Install package and dev dependencies
      run: |
        pip install -e ".[dev]"
        pip install black isort flake8 mypy
        
    - name: Format with black
      run: |
        if ! black --check feed_processor tests; then
          black feed_processor tests
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add .
          git commit -m "style: Format code with black"
          git push origin HEAD:${{ github.head_ref }}
        fi
        
    - name: Sort imports with isort
      run: |
        if ! isort --check-only feed_processor tests; then
          isort feed_processor tests
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add .
          git commit -m "style: Sort imports with isort"
          git push origin HEAD:${{ github.head_ref }}
        fi

    - name: Lint with flake8
      run: flake8 feed_processor tests

    - name: Type check with mypy
      run: mypy feed_processor

  test:
    runs-on: ubuntu-latest
    needs: lint
    services:
      prometheus:
        image: prom/prometheus:latest
        ports:
          - 9090:9090
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
        
    - name: Install package
      run: |
        pip install -e ".[test]"
        
    - name: Run tests
      run: |
        pytest tests/ --cov=feed_processor --cov-report=xml
        
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true
